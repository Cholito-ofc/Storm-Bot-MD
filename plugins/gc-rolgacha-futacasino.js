const handler = async (msg, { conn }) => {
  const chatId = msg.key.remoteJid;

  // Reacci√≥n inicial
  await conn.sendMessage(chatId, {
    react: { text: 'üìú', key: msg.key }
  });

  try {
    const casinoInfo = `üé∞|Comandos Casino/RPG/Economia:

_*[BOT SUMIKA]*_
‚Ä¢ #bal - Ver tu balance.
‚Ä¢ #einfo - ver info de tu econom√≠a.
‚Ä¢ #work - Gana Futacoins trabajando.
‚Ä¢ #slut - Gana Futacoins prostituy√©ndote.
‚Ä¢ #crime - Gana Futacoins haciendo un crimen.
‚Ä¢ #dep - Depositar tus Futacoins en el banco.
‚Ä¢ #with - Retirar tus Futacoins del banco.
‚Ä¢ #flip - Apostar Futacoins en un cara o cruz.
‚Ä¢ #pay [usuario] [cantidad] - Dar Futacoins a alguien.
‚Ä¢ #rt [rojo/negro] [cantidad] - Apuesta en ruleta.
‚Ä¢ #rob [usuario] - Robar a otro usuario.
‚Ä¢ #d - Reclama tu recompensa diaria.

_*[BOT ASAKURA]*_
‚Ä¢ .adventure - Comenzar aventura.
‚Ä¢ .cazar - Cazar algo.
‚Ä¢ .cofre - Abrir cofre.
‚Ä¢ .balance - Ver tu balance.
‚Ä¢ .claim - Reclamar objeto.
‚Ä¢ .work - Trabajar por coins.
‚Ä¢ .minar / .minar2 - Minar diamantes/experiencia.
‚Ä¢ .buy / .robar / .crime / .transfer

üìå Usa #menu para m√°s comandos en la secci√≥n *Economy*`;

    const gachaInfo = `üå∏| Comandos Gacha:

_*[BOT SUMIKA]*_
‚Ä¢ #rw - Girar waifu.
‚Ä¢ #waifus - Ver tus waifus.
‚Ä¢ #c - Reclamar waifu.
‚Ä¢ #ginfo - Ver tu informaci√≥n de gacha.
‚Ä¢ #trade [tu waifu] [otra waifu] - Intercambio.
‚Ä¢ #wshop - Waifus en venta.
‚Ä¢ #sell [precio] [waifu] - Vender waifu.
‚Ä¢ #buyc [waifu] - Comprar waifu.
‚Ä¢ #delwaifu [waifu] - Eliminar waifu.
‚Ä¢ #givechar [usuario] [waifu] - Regalar waifu.

üìå Usa #menu y ve la secci√≥n *Gacha*`;

    // Enviar men√∫ con botones
    await conn.sendMessage(chatId, {
      text: '¬øQu√© men√∫ deseas ver?',
      footer: 'Selecciona una opci√≥n:',
      templateButtons: [
        {
          index: 1,
          quickReplyButton: {
            displayText: 'üé∞ Men√∫ Casino',
            id: '#vercasino'
          }
        },
        {
          index: 2,
          quickReplyButton: {
            displayText: 'üå∏ Men√∫ Gacha',
            id: '#vergacha'
          }
        }
      ]
    }, { quoted: msg });

    // Reacci√≥n de √©xito
    await conn.sendMessage(chatId, {
      react: { text: '‚úÖ', key: msg.key }
    });

    // Listeners para botones (estos se manejan aparte en tu sistema de comandos)
    conn.on('chat-update', async update => {
      const m = update.messages?.[0];
      if (!m?.message) return;

      const buttonId = m.message?.extendedTextMessage?.contextInfo?.quotedMessage?.templateButtonReplyMessage?.selectedId;

      if (buttonId === '#vercasino') {
        await conn.sendMessage(chatId, { text: casinoInfo }, { quoted: m });
      } else if (buttonId === '#vergacha') {
        await conn.sendMessage(chatId, { text: gachaInfo }, { quoted: m });
      }
    });

  } catch (err) {
    console.error('‚ùå Error en el men√∫ de info:', err);
    await conn.sendMessage(chatId, {
      text: '‚ùå No se pudo mostrar el men√∫. Intenta nuevamente.'
    }, { quoted: msg });
  }
};

handler.command = /^menufcasino(bot)?$/i;
handler.tags = ['grupo'];
handler.help = ['info'];
handler.group = true;
handler.reaction = 'üìú';

module.exports = handler;
