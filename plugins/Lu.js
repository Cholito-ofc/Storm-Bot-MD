const axios = require('axios');
const fetch = require('node-fetch');

const handler = async (m, { conn, text, usedPrefix, command }) => {
    if (!text) {
        return conn.reply(m.chat, `✳️ Por favor proporciona una consulta\nEjemplo: *${usedPrefix}${command}* ¿quién ganó el mundial 2022?`, m);
    }

    await conn.sendMessage(m.chat, { react: { text: '⏳', key: m.key } });

    try {
        const username = m.pushName || 'Usuario';
        const txtDefault = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt').then(v => v.text());
        const syms1 = conn.chat.sAutorespond ? conn.chat.sAutorespond : txtDefault;

        let result = '';

        try {
            result = await luminsesi(text, username, syms1);
            result = cleanResponse(result);
        } catch (e) {
            console.error('Error en Luminai:', e);
        }

        if (!result || result.trim().length === 0) {
            try {
                result = await perplexityIA(text, syms1);
            } catch (e) {
                console.error('Error en Perplexity:', e);
            }
        }

        if (!result || result.trim().length === 0) {
            throw new Error('No se pudo obtener una respuesta de los servicios de IA');
        }

        const formattedResponse = `╭━〔 *LUMINAI RESPONSE* 〕━⬣
│  🔍 *Consulta:* ${text}
│  👤 *Usuario:* ${username}
╰━━━━━━━━━━━━⬣

${result}

╭━〔 *FUENTES* 〕━⬣
│  🔗 *Powered by:* Luminai AI
╰━━━━━━━━━━━━⬣`;

        await conn.reply(m.chat, formattedResponse, m);
        await conn.sendMessage(m.chat, { react: { text: '✅', key: m.key } });

    } catch (error) {
        console.error('Error general:', error);
        await conn.reply(m.chat, `❌ Ocurrió un error: ${error.message}`, m);
        await conn.sendMessage(m.chat, { react: { text: '❌', key: m.key } });
    }
};

function cleanResponse(text) {
    if (!text) return '';
    return text
        .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
        .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
        .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
        .trim();
}

async function luminsesi(q, username, logic) {
    const response = await axios.post("https://luminai.my.id", {
        content: q,
        user: username,
        prompt: logic,
        webSearchMode: true
    });
    return response.data.result;
}

async function perplexityIA(q, logic) {
    const response = await axios.get(`https://api.perplexity.ai/simplified?query=${encodeURIComponent(q)}&context=${encodeURIComponent(logic)}`);
    return response.data.response;
}

handler.command = ['luminai', 'ai', 'ask'];
handler.tags = ['ai'];
handler.help = ['luminai <pregunta>'];
handler.register = true;

module.exports = handler;
